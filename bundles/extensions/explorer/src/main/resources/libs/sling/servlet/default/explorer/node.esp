<%--
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
--%>
<%
    response.setContentType("text/html; charset=UTF-8");
    
    var path = resource.path;    
    var wsSepPos = path.indexOf(":/", 0);
    if (wsSepPos != -1) {
        path = path.substring(wsSepPos + 1);
    }

    var readonly = false; 
    
    var session = request.resourceResolver.adaptTo(Packages.javax.jcr.Session);
    
    var privilegesInfo = new Packages.org.apache.sling.jcr.jackrabbit.accessmanager.PrivilegesInfo();
    var canModifyProperties = false;
    var isJcrNode = false;
    var resourceType;
        try {
            canModifyProperties = privilegesInfo.canModifyProperties( currentNode );
            isJcrNode = true;
            if ( currentNode && currentNode.hasProperty( 'sling:resourceType' ) ) 
            {
                resourceType = currentNode.getProperty('sling:resourceType').getString();
            }
        } catch (e) {}
%>
    <div id="expl_content_header">
        <div>
            <h2> <% if (path == '/') { %> &lt;Root&gt; <% } else { %> <%= Packages.org.apache.sling.api.resource.ResourceUtil.getName( resource ) %><% } %></h2>
<%
      try {
      if ( session ) {
          session.checkPermission(path, "remove");
          if (path != '/')
          {
          %>
            <form class="deleteNote" action="<%= request.getContextPath() %><%= path %>" method="post">
                <input name=":operation" type="hidden" value="delete"> 
                <input name=":redirect" type="hidden" value="<%=request.getContextPath()%><%= Packages.org.apache.sling.api.resource.ResourceUtil.getParent(resource) %>.explorer.html"> 
                <input type="submit" class="button" value="delete this node">
            </form>
        </div>
<%
      }
      %>
      <div class="clear"></div>

      <%
          }
      } catch ( e ) {
          // don't care
      }%>
            <p>
                <a href="<%= request.getContextPath() %><%= path %>.explorer.html"><%=path%></a> 
                <% if(isJcrNode){ %>
                    (JCR identifier: <%= currentNode.getIdentifier() %>) 
                <% } %> 
            </p>
      
<%    if (session) {
          try {       
            session.checkPermission(path, "add_node");
%>
      <div>
        <h3>
          add new child node
        </h3>
        <form id="new_child_node_form" method="post" name="new_child_node_form">
          <div class="property_element">
            <table class="propoerty_table">
              <thead class="smallLabel">
                <tr>
                  <td>
                    Name hint
                  </td>
                  <td>
                    sling:resourceType
                  </td>
                  <td colspan="2">
                    jcr:primaryType
                  </td>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>
                    <input name=":nameHint" type="text" class="text">
                  </td>
                  <td>
                    <input name="sling:resourceType" id="new_node_sling_resource_type" type="text" class="text">
                  </td>
                  <td>
<% 
    var primaryNodeTypes = session.getWorkspace().getNodeTypeManager().getPrimaryNodeTypes();
    if ( primaryNodeTypes.hasNext() ) { 
%>
                    <select name="jcr:primaryType" id="jcr:primaryType">
<%      while (primaryNodeTypes.hasNext()) {
            var primaryNodeType = primaryNodeTypes.nextNodeType();
%>
                      <option>
                        <%=primaryNodeType.getName()%>
                      </option>
<% } %>
                    </select> 
<% } %>
                  </td>
                  <td>
                    <input type="submit" class="button" value="new child node" onclick="add_new_child_node(); return false;">
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </form>
      </div><%
              } catch (e) {
                  // don't care
              }
          }
          %>
      <div class="clear"></div>
    </div>
    <div>
      <%
        sling.include( path + ".explorer.edit."+ (resourceType == null ? '' : (resourceType.replace(':', '_').replace('/', '_') + '.') ) + "html" ); 
      %>
    </div>
<script type="text/javascript">
    $(function() {
                $.datetimebox.setDefaults({
                        showOn: 'both',
                        buttonImageOnly: true,
                        buttonImage: 'calendar.gif',
                        buttonText: 'Calendar',
                        dateFormat: 'dd/mm/yy hh:ii',
                        changeYear: true,
                        changeMonth: true,
                        closeText: 'Confirm',
                        closeImage: 'calendar_close.gif',
                        timeText: 'Time (hh:mm): ',
                        prevText: 'Previous',
                        nextText: 'Next',
                        currentText: 'Today',
                        monthNames: ['January', 'February', 'March', 'April', 'May', 'June','July', 'August', 'September', 'October', 'November', 'December'],
                        monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                        dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                        dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                        dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                        weekHeader: 'Week',
                        firstDay: 1,
                        isRTL: false,
                        showMonthAfterYear: false,
                        yearSuffix: '',
                        constrainInput: true,
                        onSelect: function (dateText) {
                        document.all ?
                        $(this).get(0).fireEvent("onchange")
                        : $(this).change();
                        }
                        });
                decorate_datepicker();
        });
        
        function add_new_child_node()
        {
                $.ajax({
                        url: '<%=(path == '/') ? '' : path%>/*',
                        type: 'POST',
                        data: $("form[id='new_child_node_form']" ).serialize(),
                        success: function( data, textStatus, xmlHttpRequest ) 
                                        {
                                                var child_node_location = xmlHttpRequest.getResponseHeader('Location');
                                                if ( child_node_location )
                                                {
                                                        var childPath = child_node_location.substring(Sling.contextPath.length);
                                                        load_branch( 
                                                                '<%=path%>', 
                                                                function() { skip_to( childPath );},
                                                                true
                                                        );
                                                }
                                                else
                                                {
                                                        show_error( xmlHttpRequest.responseText );
                                                }
                                        },
                        error: function( xmlHttpRequest, textStatus, errorThrown ) 
                                        {
                                                show_error( xmlHttpRequest.responseText );
                                        }
                });
                return false;
        };
        
        function create_edit_field_for_type(field_name, field_type)
        {
                var prop_val_input = '';
                switch ( field_type ) {
                        case 'Boolean' :
                                prop_val_input = '<input type="hidden" name="' 
                                                + field_name + '" id="'
                                                + field_name + '" value="false"><input class="checkbox" type="checkbox" onchange="$(\'#'
                                                + field_name + '\').val(this.checked ? \'true\' : \'false\');">';
                                break;
                        case 'Date' :
                                prop_val_input = '<input id="'
                                                + field_name + '" class="datepicker" type="text" class="text"><' + 'script>decorate_datepicker()<' + '/script>';
                                break;
                        default:
                                prop_val_input = '<input id="'
                                                + field_name + '" type="text" class="text">';                           
                } // switch
                return prop_val_input;
        };
                        
        function decorate_datepicker() {
                $(".datepicker:not(.protected)").datetimebox({
                showOn: 'both',
                buttonImageOnly: true,
                buttonImage: '/libs/sling/explorer/img/calendar.gif',
                buttonText: 'Calendar',
                // dateFormat: 'yy-mm-dd hh:ii',
                dateFormat: 'dd.mm.yy hh:ii:00',
                changeYear: true,
                changeMonth: true,
                closeText: 'Confirm',
                closeImage: '/libs/sling/explorer/img/calendar.gif',
                timeText: 'Time (hh:mm): ',
                prevText: 'Previous',
                nextText: 'Next',
                currentText: 'Today',
                monthNames: ['January', 'February', 'March', 'April', 'May', 'June','July', 'August', 'September', 'October', 'November', 'December'],
                monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                weekHeader: 'Week',
                firstDay: 1,
                isRTL: false,
                showMonthAfterYear: false,
                yearSuffix: '',
                constrainInput: true,
                onSelect: function (dateText) {
                document.all ?
                $(this).get(0).fireEvent("onchange")
                : $(this).change();
                }
                });
    }
</script>
<% 
function create_input_for_type( id, type, val, editable, omitName ) { 
    switch ( type ) { 
        case Packages.javax.jcr.PropertyType.DATE :                     
%>
    <form>
      <input class="prop_value text datepicker&lt;% if(!editable) { %&gt; protected&lt;%}%&gt;" <% if (!omitName) { %> name="<%= id %>" <% } %> id="<%= id %>" value="<%= dateFormatter.format( val.getDate().getTime() ) %>"> <%
                      break; 
        case Packages.javax.jcr.PropertyType.BOOLEAN : 
%> <input type="hidden" name="<%= id %>" id="<%= id %>_cb" value="<%= val %>"> <input type="checkbox" id="<%= id %>" <% if(!editable) { %> class="protected" <%}%> <% if ( val.getBoolean() ) { %> checked <% } %> onchange="$('[id=&lt;%= id %&gt;_cb]').val( this.checked ? 'true' : 'false' );"> 
<% 
            break;
        case Packages.javax.jcr.PropertyType.REFERENCE :
        case Packages.javax.jcr.PropertyType.WEAKREFERENCE :
        case Packages.javax.jcr.PropertyType.PATH :
            try {
                var refNode = val.getNode();
%> -&gt; <a href="#" onclick="skip_to('&lt;%= refNode.getPath() %&gt;')"><%= refNode.getPath() %> (<%= refNode.getIdentifier() %>)</a> <input class="prop_value text &lt;% if(!editable) { %&gt; protected &lt;%}%&gt;" id="<%= id %>" <% if (!omitName) { %> name="<%= id %>" <% } %> value="<%= val %>"> <% 
            } catch ( ex ) {}
            break;
        case Packages.javax.jcr.PropertyType.BINARY :
%> <a class="saveAs" href="%3C%=%20path%20%%3E" target="_blank">Download content (use "Save as...")</a> <%
            break;
        default: %> <input class="prop_value text &lt;% if(!editable) { %&gt; protected &lt;%}%&gt;" id="<%= id %>" <% if (!omitName) { %> name="<%= id %>" <% } %> value="<%= val %>"> <% 
                  break; 
    } // switch 
}
      
function create_multivalueinput_for_type( id, type, multivalue_property, include_add_field ) {
%> 
    <input type="hidden" name="<%= id %>@TypeHint" value="<%= type %>[]">
    </form>
    <ul id="<%= id %>_entries">
<% 
    if ( multivalue_property )
    {
        var editable = canModifyProperties && !multivalue_property.getDefinition().isProtected()
        for ( var idx in multivalue_property.getValues() )
        { 
            var entry = multivalue_property.getValues()[idx];
%>
<li><input type="hidden" name="<%= id %>" value="<%= entry.getString() %>">
<%          
            switch (type)
            {
                case Packages.javax.jcr.PropertyType.REFERENCE :
                case Packages.javax.jcr.PropertyType.WEAKREFERENCE :
                case Packages.javax.jcr.PropertyType.PATH :
                    try {
                        var refNode = entry.getNode();
%> -&gt; <a href="#" onclick="skip_to('&lt;%= refNode.getPath() %&gt;')"><%= refNode.getPath() %> (<%= refNode.getIdentifier() %>)</a> <input class="prop_value text &lt;% if(!editable) { %&gt; protected &lt;%}%&gt;" id="<%= id %>" <% if (!include_add_field) { %> name="<%= id %>" <% } %> value="<%= entry %>"> <% 
                    } catch ( ex ) {}
                    break;
                default:
%>
                    <%= entry.getString() %> 
<% 
            } // switch
            if ( editable ) 
            { 
%>
<a href="#" class="button" onclick="$(this).parent().remove();update_property('&lt;%= id %&gt;');">delete</a> 
<%          
            } // if 
%></li>
<% 
        } // for
    } // if ( multivalue_property ) 
%>
    </ul>
    <div class="addMultivalueproperty">
      <% if ( include_add_field && canModifyProperties && !multivalue_property.getDefinition().isProtected() ) { 
                              create_input_for_type( id+"_new_entry", type, '', true, true );
                              %>
        <a href="#" onclick="add_property_entry('&lt;%= id %&gt;')" class="button">add</a>
        <div class="clear"></div>
    </div>
    <% 
        }
    }
    %>
