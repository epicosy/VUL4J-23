<%--
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
--%> 
<%
    response.setContentType("text/html; charset=UTF-8");
    
    var path = resource.path;
    
    var wsSepPos = path.indexOf(":/", 0);
    if (wsSepPos != -1) {
        path = path.substring(wsSepPos + 1);
    }
    
    var readonly = false; 
    var dateFormatter = new Packages.java.text.SimpleDateFormat("dd.MM.yyyy HH:mm:ss");             

    var session = request.resourceResolver.adaptTo(Packages.javax.jcr.Session);
    if (session)
    {
        // var primaryNodeTypes = session.getWorkspace().getNodeTypeManager().getPrimaryNodeTypes();
        var mixinNodeTypes = session.getWorkspace().getNodeTypeManager().getMixinNodeTypes();           
    }
    var privilegesInfo = new Packages.org.apache.sling.jcr.jackrabbit.accessmanager.PrivilegesInfo();
    var canModifyProperties = false;
    var isJcrNode = false;
    try {
        canModifyProperties = privilegesInfo.canModifyProperties( currentNode );
        isJcrNode = true;
    } catch (e) {}
    var properties = resource.adaptTo(Packages.org.apache.sling.api.resource.ValueMap);
    if (!properties) {
        readonly = true;
        properties = Packages.org.apache.sling.api.resource.ResourceUtil.getValueMap(resource)
    }
    var primaryNodeTypeId = "jcr:primaryType";
    var primaryNodeType = properties.get(primaryNodeTypeId, Packages.java.lang.String);
    if ( primaryNodeType ) {
    %>      
    <div class="edit_properties_container">
        <h3>general</h3>
        <div id="property_element_<%= primaryNodeTypeId %>" class="property_element">
        <fieldset>
            <label for="<%= primaryNodeTypeId %>"><%= primaryNodeTypeId %></label>
            <%  
            var primaryNodeTypes = session.getWorkspace().getNodeTypeManager().getPrimaryNodeTypes();
            if ( primaryNodeTypes.hasNext() ) { %>
            <select class="prop_value protected" name ="<%= primaryNodeTypeId %>" id="<%= primaryNodeTypeId %>">
                <% while ( primaryNodeTypes.hasNext() ) {
                    var nodeType = primaryNodeTypes.nextNodeType();
                    %>
                    <option <% if ( nodeType.getName().equals( primaryNodeType ) ) { %> selected <%}%>><%= nodeType.getName() %></option>
                <% } %>
            </select>               
            <% } %>
            </fieldset>
        </div>
    <%
    }
    
    // var mixinTypes = resource.getMixinTypes();
    var mixinTypesId = "jcr:mixinTypes";
    var mixinTypes = properties.get( mixinTypesId, Packages.javax.jcr.Property );
    if ( mixinTypes || canModifyProperties ) { %>
        <h3>mixin types</h3>
        <div id="property_element_<%= mixinTypesId %>" class="multivalued property_element">
            <form id="properties_form_<%= mixinTypesId %>" action="<%= request.getContextPath() %><%= path %>" method="post">
                <fieldset>
                    <label for="<%= mixinTypesId %>"><%= mixinTypesId %></label>
                    <%  
                    create_multivalueinput_for_type( mixinTypesId, Packages.javax.jcr.PropertyType.NAME, mixinTypes, false );
                    %>
                    <% if (canModifyProperties) { %>
                        <select id="<%= mixinTypesId %>_new_entry" >
                        <%
                            var mixinNodeTypes = session.getWorkspace().getNodeTypeManager().getMixinNodeTypes();
                            while ( mixinNodeTypes.hasNext() ) {
                                var nodeType = mixinNodeTypes.nextNodeType();
                        %>
                            <option><%= nodeType.getName() %></option>
                        <% } %>
                        </select>
                        <a href="#" onclick="add_property_entry('<%= mixinTypesId %>')" class="button">add</a>
                    <% } %>
                </fieldset>
            </form>
        </div>
    <%  
    }
    // sort properties
    var propKeys = Packages.java.util.Arrays.asList( properties.keySet().toArray() );
    Packages.java.util.Collections.sort( propKeys );
    propKeys = propKeys.toArray();
    if ( (propKeys.length > 0) || canModifyProperties ) 
    { 
%>
        <h3>properties</h3>
<%
        for ( var idx in propKeys ) {
            var id = propKeys[idx];
            var isProperty = false;
            var isMultivalueProperty = false;
            var val = properties.get( id, Packages.javax.jcr.Property );
            var type;
            if ( val ) 
            {
                isProperty = true;
                type = Packages.javax.jcr.PropertyType.nameFromValue( val.type );
                isMultivalueProperty = val.isMultiple();
            } 
            else 
            {
                val = properties.get( id );
                type = "String";
            } 
            if ( !id.equals( primaryNodeTypeId ) && !id.equals( mixinTypesId ) ) { %>
            <div id="property_element_<%= id %>" class="<% if ( isMultivalueProperty ) {%> multivalued <% } %> property_element">
            <form id="properties_form_<%= id %>" action="<%= request.getContextPath() %><%=path%>" method="post">
                <fieldset>
                    <label for="<%= id %>"><%= id %> 
                    <% if (isProperty) { %>
                    [ <%= type %> <% if ( isMultivalueProperty ) {%>MULTIVALUE<% } %>]
                    <% } else { %>
                    [not a property!]
                    <% } %>
                    </label>
                    <% 
                    if ( isProperty )
                    {
                        if ( isMultivalueProperty ) 
                        {                   
                            create_multivalueinput_for_type( id, val.type, val, true );
                        } else { 
                            if ( isProperty )
                            {
                                create_input_for_type( id, val.getType(), val, ( canModifyProperties && !val.getDefinition().isProtected() ), false  );
                            }
                        }
                    }   
                    else {                  
                        // used to output: <input class="prop_value text" id="<%= id %>" name="<%= id %>" value="<%= val %>" />                 
                    }
                     
            %>
                <input name=":redirect" type="hidden" value="<%=request.getContextPath()%><%=path%>.explorer.html">
                </fieldset>
            </form>         

        
            <% if ( canModifyProperties && isProperty && !val.getDefinition().isProtected() ) { %>
                <div class="edit_properties">
                <% if (!isMultivalueProperty) { %>
                    <button class="button_update_property" onclick="update_property('<%= id %>'); return false;">update property</button>
                <% } %>
                    <button class="button_delete_property" onclick="delete_property('<%= id %>'); return false;">delete property</button>
                </div>          
            <% } %>
          </div>
          
        <% }
        } // for
    }
    %>
    </div>
    <%
    if (!readonly && canModifyProperties ) {
    %>
        <div class="blubb">
          <h3>add property</h3>
          <div class="property_element">
          <table class="propoerty_table">
          <thead class="smallLabel">
          <tr>
          <td>Name</td>
          <td>Multi?</td>
          <td>Type</td>
          <td colspan="2">Value</td>
          </tr>
          </thead>
          <tbody>
          <tr>
              <td><input id="expl_add_prop_name" type="text" class="text"/></td>
              <td><input id="expl_add_prop_multi" class="checkbox" type="checkbox"></td>
              <td>
                  <select id="expl_add_prop_type">
                    <option>Name</option>
                    <option>String</option>
                    <option>Boolean</option>
                    <option>Date</option>
                    <option>Double</option>
                    <option>Long</option>
                    <option>Path</option>
                    <option>Reference</option>
                    <option>WeakReference</option>
                  </select>
              </td>
              <td><div id="prop_value_div"><input id="expl_add_prop_value" type="text" class="text"></div></td>
              <td><a class="button" href="#" onclick="add_prop('<%=path%>');">add property</a></td>
              </tr>
          </tbody>
          </table>
          </div>
        </div>

    <%
    }
    %>

<script type="text/javascript">
    $(function() {
        /* we are lacking the id, which is required to update_property
        $("button.button_update_property").click( function(e) {
            update_property();
            return false;
        });
        */
        
        $("#expl_add_prop_type").change( function (e) {
            $("#prop_value_div").html( create_edit_field_for_type( 'expl_add_prop_value', $("#expl_add_prop_type").val() ) );
        });
        
        // disable protected fields
        $(".protected").attr("disabled", "disabled");
    
        $.datetimebox.setDefaults({
            showOn: 'both',
            buttonImageOnly: true,
            buttonImage: 'calendar.gif',
            buttonText: 'Calendar',
            dateFormat: 'dd/mm/yy hh:ii',
            changeYear: true,
            changeMonth: true,
            closeText: 'Confirm',
            closeImage: 'calendar_close.gif',
            timeText: 'Time (hh:mm): ',
            prevText: 'Previous',
            nextText: 'Next',
            currentText: 'Today',
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June','July', 'August', 'September', 'October', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
            weekHeader: 'Week',
            firstDay: 1,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: '',
            constrainInput: true,
            onSelect: function (dateText) {
            document.all ?
            $(this).get(0).fireEvent("onchange")
            : $(this).change();
            }
            });
        decorate_datepicker();
    });
    
    function add_new_child_node()
    {
        $.ajax({
            url: '<%=path%>/*',
            type: 'POST',
            data: $("form[id='new_child_node_form']" ).serialize(),
            success: function( data, textStatus, xmlHttpRequest ) 
                    {
                        var child_node_location = xmlHttpRequest.getResponseHeader('Location');
                        if ( child_node_location )
                        {
                            load_branch( 
                                '<%=path%>', 
                                function() { skip_to( child_node_location, $("#new_node_sling_resource_type").val() );},
                                true
                            );
                        }
                        else
                        {
                            show_error( xmlHttpRequest.responseText );
                        }
                    },
            error: function( xmlHttpRequest, textStatus, errorThrown ) 
                    {
                        show_error( xmlHttpRequest.responseText );
                    }
        });
        return false;
    };
    
    function create_edit_field_for_type(field_name, field_type)
    {
        var prop_val_input = '';
        switch ( field_type ) {
            case 'Boolean' :
                prop_val_input = '<input type="hidden" name="' 
                        + field_name + '" id="'
                        + field_name + '" value="false"><input class="checkbox" type="checkbox" onchange="$(\'#'
                        + field_name + '\').val(this.checked ? \'true\' : \'false\');">';
                break;
            case 'Date' :
                prop_val_input = '<input id="'
                        + field_name + '" class="datepicker" type="text" class="text"><' + 'script>decorate_datepicker()<' + '/script>';
                break;
            default:
                prop_val_input = '<input id="'
                        + field_name + '" type="text" class="text">';               
        } // switch
        return prop_val_input;
    };

    // adding click handlers for "delete property" links (x)
    function add_property_entry( id )
    {               
        var value = $("[id="+ id +"_new_entry]").val();
        var li_html = '<li><input type="hidden" name="' 
                    + id + '" value="' 
                    + value + '" />'
                    + value + ' <a href="#" class="button" onclick="$(this).parent().remove();update_property(\'' + id + '\');">delete</a></li>';
        $("ul[id='" + id + "_entries']").append(li_html);
        update_property( id );
    }

    // submit property
    function update_property( id )
    {
        $.ajax({
            url: '<%= path %>',
            type: 'POST',
            data: $("form[id='properties_form_"+id+"']" ).serialize(),
            success: function( data, textStatus, xmlHttpRequest ) 
                    {
                        reload_properties();
                    },
            error: function( xmlHttpRequest, textStatus, errorThrown ) 
                    {
                        show_error( xmlHttpRequest.responseText );
                    }
        });
    }
    
    function delete_property( id )
    {
        var params = {};
        params[id + "@Delete"] = "delete";
        $.ajax({
            url: '<%= path %>',
            type: 'POST',
            data: params,
            success: function( data, textStatus, xmlHttpRequest ) 
                    {
                        $("[id=property_element_" + id+"]").remove();
                        // todo: animate "Deleted"
                    },
            error: function( xmlHttpRequest, textStatus, errorThrown ) 
                    {
                        show_error( xmlHttpRequest.responseText );
                    }
        });
    }
            
    function decorate_datepicker() {
        $(".datepicker:not(.protected)").datetimebox({
        showOn: 'both',
        buttonImageOnly: true,
        buttonImage: '/libs/sling/explorer/img/calendar.gif',
        buttonText: 'Calendar',
        // dateFormat: 'yy-mm-dd hh:ii',
        dateFormat: 'dd.mm.yy hh:ii:00',
        changeYear: true,
        changeMonth: true,
        closeText: 'Confirm',
        closeImage: '/libs/sling/explorer/img/calendar.gif',
        timeText: 'Time (hh:mm): ',
        prevText: 'Previous',
        nextText: 'Next',
        currentText: 'Today',
        monthNames: ['January', 'February', 'March', 'April', 'May', 'June','July', 'August', 'September', 'October', 'November', 'December'],
        monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
        weekHeader: 'Week',
        firstDay: 1,
        isRTL: false,
        showMonthAfterYear: false,
        yearSuffix: '',
        constrainInput: true,
        onSelect: function (dateText) {
        document.all ?
        $(this).get(0).fireEvent("onchange")
        : $(this).change();
        }
        });
}
</script>

<% function create_input_for_type( id, type, val, editable, omitName ) { 
    switch ( type ) { 
        case Packages.javax.jcr.PropertyType.DATE :             
            %>
            <input  class="prop_value text datepicker<% if(!editable) { %> protected<%}%>" <% if (!omitName) { %> name="<%= id %>" <% } %> id="<%= id %>" value="<%= dateFormatter.format( val.getDate().getTime() ) %>" />
        <%
        break; 
        case Packages.javax.jcr.PropertyType.BOOLEAN : %>
            <input type="hidden" name="<%= id %>" id="<%= id %>_cb" value="<%= val %>" >
            <input type="checkbox" class="checkbox" id="<%= id %>" <% if ( val.getBoolean() ) { %>checked<% } %> onchange="$('[id=<%= id %>_cb]').val( this.checked ? 'true' : 'false' );" <% if(!editable) { %> class="protected" disabled<%}%>>
        <% 
            break;
        case Packages.javax.jcr.PropertyType.REFERENCE :
        case Packages.javax.jcr.PropertyType.WEAKREFERENCE :
        case Packages.javax.jcr.PropertyType.PATH :
            try {
                var refNode = val.getNode();
        %>
            -> <a href="#" onclick="skip_to('<%= refNode.getPath() %>')"><%= refNode.getPath() %> (<%= refNode.getIdentifier() %>)</a>
            <input class="prop_value text <% if(!editable) { %> protected <%}%>" id="<%= id %>" <% if (!omitName) { %> name="<%= id %>" <% } %> value="<%= val %>" />
        <% 
            } catch ( ex ) {}
            break;
        case Packages.javax.jcr.PropertyType.BINARY :
        %>
            <a class="saveAs" href="<%= path %>" target="_blank">Download content (use "Save as...")</a>
        <%
            break;
        default: %>
            <input class="prop_value text <% if(!editable) { %> protected <%}%>" id="<%= id %>" <% if (!omitName) { %> name="<%= id %>" <% } %> value="<%= val %>" />                           
        <% 
            break; 
    } // switch 
} %>
    
<%
function create_multivalueinput_for_type( id, type, multivalue_property, include_add_field ) {
    var typeStr = Packages.javax.jcr.PropertyType.nameFromValue( type );
%>
    <input type="hidden" name="<%= id %>@TypeHint" value="<%= typeStr %>[]" /> 
    <ul id="<%= id %>_entries">
    <% 
    if ( multivalue_property ) {
        var editable = canModifyProperties && !multivalue_property.getDefinition().isProtected()
        for ( var idx in multivalue_property.getValues() )
        { 
            var entry = multivalue_property.getValues()[idx];   %>
            <li>
                <input type="hidden" name="<%= id %>" value="<%= entry.getString() %>" />
                <%
                switch (type)
                {
                    case Packages.javax.jcr.PropertyType.REFERENCE :
                    case Packages.javax.jcr.PropertyType.WEAKREFERENCE :
                    case Packages.javax.jcr.PropertyType.PATH :
                        try {
                            var refNode = session.getNodeByIdentifier(entry.getQValue().getString());
                            %>
                -&gt; <a href="#" onclick="skip_to('<%= refNode.getPath() %>');"><%= refNode.getPath() %> (<%= refNode.getIdentifier() %>)</a> 
 
                            <% 
                        } catch ( ex ) {
                        }
                        break;
                    default:
                %>
                <%= entry.getString() %> 
                <% 
                } // switch
                %>
                <% if ( editable ) { %>
                    <a href="#" class="button" onclick="$(this).parent().remove();update_property('<%= id %>');">delete</a>
                <% } %>
            </li>
        <% 
        } // for
    } // if
    %>
    </ul>
    <div class="addMultivalueproperty">
        <% if ( include_add_field && canModifyProperties && !multivalue_property.getDefinition().isProtected() ) { 
            create_input_for_type( id+"_new_entry", typeStr, '', true, true );
            %>
            <a href="#" onclick="add_property_entry('<%= id %>')" class="button">add</a>
            <div class="clear"></div>
    </div>  
        <% 

    }

}
%>